import { I{NAME_UPPER}Repository } from "@core/interfaces/I{NAME_UPPER}Repository";
import { {NAME_UPPER}Details } from "@core/utils/{NAME_UPPER}/types";
import { ErrorDetails } from "@core/utils/utils";
import sequelize from "@infrastructure/config/sequelize";
import { {NAME_UPPER} } from "@infrastructure/models/{NAME_LOWER}Model";

export class {NAME_UPPER}Repository implements I{NAME_UPPER}Repository{
    async create({NAME_LOWER}Details: {NAME_UPPER}Details, errors: ErrorDetails[]): Promise<void | null>{
        try{
            await sequelize.getRepository({NAME_UPPER}).create({NAME_LOWER}Details);
        } catch(error){
            console.log(error);
            errors.push(new ErrorDetails(500, "Error adding {NAME_LOWER} to database"));
            return null;
        }
    }
    async findById(id: number, errors: ErrorDetails[]): Promise<{NAME_UPPER}>{
        try{
            const {NAME_LOWER} = await sequelize.getRepository({NAME_UPPER}).findByPk(id);

            if(!{NAME_LOWER}){
                errors.push(new ErrorDetails(404, "{NAME_UPPER} not found"));
                return null;
            }

            return {NAME_LOWER};
        } catch(error){
            console.log(error);
            errors.push(new ErrorDetails(500, "Error getting {NAME_LOWER} from database"));
            return null;
        }
    }

    async find{NAME_UPPER_PLURAL}(errors: ErrorDetails[]): Promise<{NAME_UPPER}[]>{
        try{
            const {NAME_LOWER_PLURAL} = await sequelize.getRepository({NAME_UPPER}).findAll();
            
            if(!{NAME_LOWER_PLURAL}){
                errors.push(new ErrorDetails(404, "{NAME_UPPER_PLURAL} not found"));
                return null;
            }

            return {NAME_LOWER_PLURAL};
        } catch(error){
            console.log(error);
            errors.push(new ErrorDetails(500, "Error getting {NAME_LOWER_PLURAL} from database"));
            return null;
        }
    }

    async deleteById(id: number, errors: ErrorDetails[]): Promise<void | null>{
        try{
            const {NAME_LOWER} = await sequelize.getRepository({NAME_UPPER}).findByPk(id);

            if(!{NAME_LOWER}){
                errors.push(new ErrorDetails(404, "{NAME_UPPER} not found"));
                return null;
            }

            await {NAME_LOWER}.destroy();
        }catch(error){
            console.log(error);
            errors.push(new ErrorDetails(500, "Error deleting {NAME_LOWER} from database"));
            return null;
        }
    }
}